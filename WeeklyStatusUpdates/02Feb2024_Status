Integration Design for Food bank management system:
Here, we are going to talk about the design part for the database that we are using for this project. Manily we will focus on the
design part for each departments like donation management, volunteer management etc.

Designing the database tables for user registration and profiles involves creating a structured schema to efficiently manage 
information related to various user roles such as food donors, recipients, volunteers, and administrators. The goal is to 
capture essential user account details and create comprehensive user profiles with personal and contact information. Here are 
key considerations for designing the tables:
1) User Table:
Create a central "User" table to store common attributes like UserID, UserType (donor, recipient, volunteer, administrator), Username, Password, and RegistrationDate.
Utilize UserType to distinguish between different user roles.

2) UserProfile Table:
Design a "UserProfile" table linked to the "User" table via the UserID as a foreign key.
Include attributes such as ProfileID, FirstName, LastName, Email, ContactNumber, and Address in the "UserProfile" table.
This one-to-one relationship ensures that each user has a corresponding profile.

Primary and Foreign Keys:
The UserID should be established as the primary key in the "User" table.
UserID can be used as a foreign key in "UserProfile" to link user accounts with user profiles.

Primary Key in "User" Table:
The "User" table has a primary key column named "UserID.".
A primary key ensures that each record in the "User" table has a unique identifier.
As a result, data integrity is maintained and information can be retrieved efficiently.

Foreign Key in "UserProfile" Table:
Using the "UserID" column as a foreign key, the "UserProfile" table is constructed.
By referencing the "User" table's primary key, it associates user accounts with their respective profiles.

Attributes and Data Types:
Data types for attributes should be selected according to the nature of the information (For example: string names, emails, and dates).
Each attribute should be atomic and represent a single piece of data

Normalization:
Ensure that the tables are in the optimal normalized form by applying normalization techniques.

Constraints:
Maintain data integrity by implementing constraints such as unique constraints, not-null constraints, and check constraints.
Predefined user roles should be adhered to for UserType.

Unique constraints:
Unique constraints should be implemented on columns whose uniqueness is essential, such as the "UserID" column in the "User" table.
The database will not contain duplicate user IDs as each user will have a distinct identifier.

Not-Null Constraints:
Columns that cannot contain NULL entries are forced to have not-null constraints.
To ensure that essential information is always available, fields such as "Username" and "Password" in the "User" table should have no null constraints.

Check Constraints:
Utilize check constraints to enforce specific conditions on data values.
As an example, it may be beneficial to apply a constraint to the "UserType" column if it represents distinct roles for different types of users.
