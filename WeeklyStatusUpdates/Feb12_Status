** Non-Functional Requirements for the Food Bank Framework:

1. Performance
    - Under normal network conditions, the system should react to user actions in three seconds or less.
    - Report generation is an example of a batch operation that should finish in a fair amount of time, no more than ten minutes.
    - Scalability: There should be no performance drop when the system can accommodate a 20% increase in the number of concurrent us.
     The system must deliver responsiveness and handle increasing user volume effectively:
     Responsiveness: Under normal network conditions, user actions should trigger responses within 3 seconds.
      Report generation: Batch operations like reports should complete within 10 minutes.
      Scalability: Performance should remain stable even with a 20% increase in concurrent users.
      Benefits:
	Fast response times enhance user experience and efficiency.
	Reasonable report generation speeds ensure timely access to valuable insights.
	Scalability accommodates growth and prevents performance bottlenecks.
These requirements guarantee an agile and adaptable system that supports increasing user demands without compromising efficiency.

2. Security
    - All sensitive data, including donor information and volunteer profiles, must be encrypted both in transit and at rest.
    - Role-based access control should be implemented to ensure that users can only access data and functionalities appropriate to their roles.
    - Regular security audits and penetration testing should be conducted to identify and address potential vulnerabilities.

   This system prioritizes robust security measures to protect sensitive data and user access:
    - Data encryption: All sensitive information, including donor details and volunteer profiles, must be encrypted at rest (stored) and in transit (communicated).
    - Role-based access control: Implement a system where users only access data and features relevant to their assigned roles, minimizing unauthorized access.
   - Security audits and testing: Conduct regular security audits and penetration testing to identify and address potential vulnerabilities before they can be exploited.

   Benefits:
   - Encryption safeguards sensitive data from unauthorized access, even if intercepted.
   - Role-based access control grants appropriate user privileges, minimizing the risk of misuse.
   - Regular security assessments strengthen the system's defenses against emerging threats.
These requirements ensure a secure environment for managing sensitive data and user accounts, fostering trust and compliance with data protection regulations.

3. Stability
    - The system should have an uptime of at least 99.9%, allowing for scheduled maintenance windows.
    - Automatic backups of all data should be performed daily, with a retention period of at least 30 days.
    - Error handling mechanisms should be in place to gracefully handle unexpected failures and prevent data loss.

      This system prioritizes high availability and data integrity with the following key requirements:

    - High uptime: Aim for at least 99.9% uptime, allowing for planned maintenance periods.
    - Regular backups: Conduct automatic daily backups of all data, ensuring a retention period of at least 30 days.
    - Robust error handling: Implement mechanisms to gracefully handle unexpected failures, preventing data loss and minimizing service disruptions.

Benefits:
    - Minimized downtime ensures consistent availability for food banks and clients.
    - Regular backups safeguard crucial data against failures or accidental deletion.
    - Robust error handling prevents cascading issues and data corruption.
    - These requirements ensure a reliable and resilient food bank management system, minimizing disruptions and safeguarding valuable data.

4. Availability
    - The system should be accessible 24/7 from any location with internet connectivity.
    - Redundant servers and failover mechanisms should be implemented to ensure high availability in the event of hardware or network failures.
    - Emergency procedures should be documented and tested to minimize downtime in case of disasters.

    The system prioritizes uninterrupted service delivery and resilience in case of emergencies:
    - 24/7 accessibility: Users should be able to access the system anytime, anywhere with internet access.
    - High availability: Redundant servers and failover mechanisms ensure service continuity even during hardware or network disruptions.
    - Disaster recovery: Documented and tested emergency procedures minimize downtime in case of major incidents.

Benefits:
    - Constant accessibility empowers food banks and users to manage operations efficiently.
    - Redundancy minimizes service interruptions, ensuring critical data and functionalities remain available.
    - Prepared disaster recovery plans mitigate the impact of unforeseen events, safeguarding system integrity.
    - These requirements guarantee a reliable and responsive system, minimizing disruptions and ensuring continued support for food bank operations.

5. Data Integrity
    - Data integrity checks should be performed regularly to detect and prevent corruption or loss of data.
    - Version control mechanisms should be implemented to track changes to critical data and allow for rollbacks if necessary.
    - Audit trails should be maintained to track user actions and modifications to sensitive data.

This system prioritizes the accuracy, traceability, and accountability of data:

     - Data integrity checks: Regular checks are required to identify and prevent data corruption or loss.
     - Version control: Critical data changes should be tracked through version control, enabling rollbacks if necessary.
     - Audit trails: User actions and modifications to sensitive data must be documented in audit trails for accountability and analysis.

Benefits:
     - Data integrity checks ensure reliable and trustworthy information for decision-making.
     - Version control allows for recovering from potential errors or reverting to previous data states.
     - Audit trails provide transparency and facilitate investigations into data modifications.
     - These requirements safeguard data accuracy and promote responsible data management, crucial for fostering trust and ensuring regulatory compliance.

6. Usability
	- The user interface should be intuitive and easy to navigate, with consistent design patterns and terminology.
	- Accessibility features should be implemented to accommodate users with disabilities.
	- Training materials and documentation should be provided to help users quickly learn how to use the system effectively.

This system prioritizes a user-friendly experience and empowers users through accessible design and comprehensive training:
Intuitive UI: Design a clear and consistent interface with familiar patterns and terminology, minimizing learning curves.
Accessibility: Integrate features that cater to users with diverse needs and abilities, ensuring inclusivity.
Training resources: Provide readily available materials (guides, tutorials) to help users learn the system effectively and maximize its potential.

Benefits:
     - An intuitive UI minimizes user frustration and promotes efficient system adoption.
     - Accessibility features broaden the system's reach and inclusivity, catering to all potential users.
     - Comprehensive training empowers users, enhances system utilization, and fosters self-sufficiency.
     - These requirements ensure a welcoming and empowering user experience, promoting engagement and maximizing the system's value for your food bank community.



7. Scalability
    - The system should be designed to accommodate future growth in both data volume and user base.
    - Performance should remain consistent even as the system scales to handle larger loads of data and more concurrent users.
    - Horizontal and vertical scaling strategies should be evaluated and implemented as needed to meet increasing demands.

This system prioritizes adaptability and efficient growth to handle increasing data and user demands:

Scalable architecture: The system should be designed with growth in mind, accommodating larger data volumes and user bases.
Consistent performance: Scaling shouldn't compromise performance, ensuring consistent response times and functionality under increased load.
Scaling strategies: Evaluate and implement horizontal (adding more servers) or vertical scaling (upgrading hardware) as needed to meet demands.
Benefits:

Scalability empowers the system to grow alongside your food bank's needs, preventing performance bottlenecks or limitations.
Consistent performance ensures reliable and uninterrupted service for users, even during periods of growth.
Strategic scaling optimizes resource utilization and cost-effectiveness while meeting performance requirements.
These requirements guarantee a future-proof system that adapts to your food bank's evolving needs, ensuring operational efficiency and seamless user experience.


** ER Diagrams: 
We have built an ER diagram for the integrated food bank management system and the details are as follows:

Entities:
User table:
Attributes: UserID (primary key), Name, Contact Details, UserType (Donor, Recipient, Volunteer, Administrator)
- UserID: A user can have multiple types/roles, based on what they are doing. For example, a user can be a donor, who donates food.
A recipient can act as a user of the food bank management system, where they can receive the food donation.
A volunteer with a specific skill set and availability can be a user who logs in to the food bank management system and works as a skilled volunteer.
An administrator is a person, or user, who has admin rights and who looks after all the food bank management system or handles the system.
- Name: This is user's name.
- Contact Details: This is the user's email or  phone number, which will be used to contact them and send alert notifications.
- User Type: A user can be a Donor, a Recipient, a Volunteer, or an Administrator.

Donation Table:
Attributes: DonationID (primary key), UserID (foreign key to User), Date, Quantity, Type, ExpirationDate
Here, Donation_ID is the primary key, where we are able to track all the doantions based on the Donation_ID. User_ID from the Uset table is mapped into this table, to link the donations to the users who have made donations.
This table consists of attributes like date(for the donation date), quantity(to map the quantity of donation made in Lbs/Kgs), Type(this can be ready food, package food, based on the food type) 
and at last we have, ExpirationDate(for the food donated, we have mapped date of expiry).

FoodItem Table:
Attributes: FoodItemID (primary key), Name, Category, AllergenInfo, NutritionalInfo
Here, FoodItemID is the primary key, through which all the donated food items are tracked.
Name, is for the food, just as an identifier.
Category, is based on the food type, under which cateogory the food comes in.
AllergenInfo, this attribute is to give information about the food's allergy to customers.
NutritionalInfo, for the food, we have nutiritional values specified.

Inventory Table:
Attributes: InventoryID (primary key), FoodItemID (foreign key to FoodItem), Quantity, Location
InventoryID, is the primary key, from which the food items stored in inventory are tracked.
FoodItemID, is used to identify the type of food and all other food details.
Quantity, is amount of food stored, in Lbs/Kgs.
Location, is the place where the food is stored

Recipient Table:
Attributes: RecipientID (primary key), UserID (foreign key to User), Eligibility Status, FamilySize
RecipientID, is the unique id given to each recipient.
UserID, a recippient who is also a user, has a user id.
Eligibility, this is used to track the eligibility for each recipient.
Status, this is used to store the current satus of the food order
FamilySize, it is used to store the number of family members of recipent

DistributionEvent Table:
Attributes: EventID (primary key), Date, Location, VolunteerCount

EventID, is unique identifier to DistributionEvent table
Date is an attribute used  for storing the date of DistributionEvent
Location, it is used for storing the location of the food
VolunteerCount, it is used to stotre the count of volunteer for distribution

Volunteer Table:
Attributes: VolunteerID (primary key), UserID (foreign key to User), Skills, Availability
VolunteerID, is and unique and not null attribute in Volunteer table
UserId , it is foreign key and primary key in user tabel
Skills , it is used to sorting skills of the Volunteer
Availability , is used to store the Availability  of the volunteer

VolunteerActivity Table :
Attributes: ActivityID (primary key), VolunteerID (foreign key to Volunteer), EventID (foreign key to DistributionEvent), Role, Hours
ActivityID , it is unique and not null in VolunteerActivity table
VolunteerID , it is used to store the Volunteer's ID in VolunteerActivity table
EventID , it is used to store the events's ID in VolunteerActivity table
Role : it is used for storing volunteer role in the VolunteerActivity table
Hours , it is used for storing the number of hours Volunteer woked

Relationships:

A User can donate (1:N) Donations.
A User can participate in (1:N) DistributionEvents as a Volunteer.
A User can be the recipient of (1:N) Orders in DistributionEvents.
A Donation consists of (1:N) FoodItems.
An Inventory record tracks the quantity of (1:N) FoodItems at a location.
A Recipient can place (1:N) Orders.
A DistributionEvent can have (1:N) Orders associated with it.
A DistributionEvent requires (1:N) Volunteers for various activities.
A Volunteer can participate in (N:N) DistributionEvents in various activities.

